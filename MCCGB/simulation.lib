LIB "mcgb.lib";
LIB "mcgbcheck.lib";
LIB "completion2.lib";
LIB "buchtrace.lib";

proc sucheBeispiel(ideal G, list Modcgs, ideal M1, list cgs_m1, ideal M_simpl, list cgs_simpl, ideal M_step) {
  // Without updating CGS, result is not CGB.
  printf("Without updating CGS:");
  ideal M_falsche = mcgbMainFalscher(G, Modcgs);
  int valid_flag = check_validity(idealToList(M_falsche), Modcgs);
  if (valid_flag == 1) {
    printf("Result is still MCGB.");
  } else {
    if (valid_flag == -1) {
      printf("Result is a CGB, not minimal!");
    } else {
      printf("RESULT IS NOT EVEN A CGB!");
    }
  }


  // Branch split on CGS.
  if (size(cgs_m1) > size(Modcgs)) {
   printf("CGS of M has branch split!");
  } else {
    printf("CGS of M has NO branch split!");
  }

  // M_simpl < M1.
  int cmp_flag = lessSet(idealToList(M_simpl), idealToList(M1));
  if (cmp_flag == 1) {
    printf("M_simpl is better than M!");
  } else {
    if (cmp_flag == 2) {
      printf("M_simpl is the same as M!");
    } else {
      printf("M_simpl is worse than M!");
    }
  }

  // M_step < M_simpl.
  cmp_flag = lessSet(idealToList(M_step), idealToList(M_simpl));
  if (cmp_flag == 1) {
    printf("M_step is better than M_simpl!");
  } else {
    if (cmp_flag == 2) {
      printf("M_step is the same as M_simpl!");
    } else {
      printf("M_step is worse than M_simpl!");
    }
  }

}

/*
Test with optmized mcgbGenerate().
 */
proc simulate(ideal E, list N, ideal F, int sim_times, link out, link dbg_out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);
  system("--ticks-per-sec", 1000);

  set_global_rings_mcgb();
  set_global_rings();
  set_global_objects();
  exportto(Top, debug_mode);
  exportto(Top, out);
  exportto(Top, dbg_out);

  fprintf(out, newline + "+++++++++++++++++++++");
  fprintf(out, "The given ring is:");
  fprintf(out, "%s"+newline, BR);

  int i;
  
  // Print the given parametric ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));
  
  ideal G_origin;
  list Modcgs;
  timer = 0;
  int cnt_Time = timer;
  (G_origin, Modcgs) = cgb_mod(F, E, N, 1, out);
  int time_KSW = timer - cnt_Time;
  list all_polys = idealToList(G_origin);

  exportto(Top, Modcgs);
          
  ideal M1;
  list cgs1;
  timer = 0;
  cnt_Time = timer;
  (M1, cgs1) = mcgbMainComp(G_origin, Modcgs, 1);
  int time_mcgb = timer - cnt_Time;
  all_polys = mergeList(all_polys, idealToList(M1));
  printf("Time of MCGBMain: %s.", string(time_KSW + time_mcgb));

  
  ideal M2;
  list cgs2;
  timer = 0;
  cnt_Time = timer;
  (M2, cgs2) = getMCGBComp(E, listToIdeal(N), G_origin, Modcgs, 1);
  int time_simpl = timer - cnt_Time;
  all_polys = mergeList(all_polys, idealToList(M2));
  printf("Time of MCGBSimpl: %s.", string(time_KSW + time_simpl));

  ideal M3;
  list cgs3;
  timer = 0;
  cnt_Time = timer;
  (M3, cgs3) = getMCGBOneStep1Comp(E, N, G_origin, Modcgs, 1);
  int time_onestep = timer - cnt_Time;
  all_polys = mergeList(all_polys, idealToList(M3));
  printf("Time of MCGBOneStep: %s.", string(time_onestep + time_KSW));
  
  
  
  timer = 0;
  cnt_Time = timer;
  ideal M4 = mcgbGenerate3(E, listToIdeal(N), F);
  int time_completion = timer - cnt_Time;
  all_polys = mergeList(all_polys, idealToList(M4));
  printf("Time of Completion: %s.", string(time_completion));
  

  all_polys = sortSetAsce(all_polys);

    
  // Print M1.
  fprintf(out, "--------- mcgbMain -------------" + newline);
  showCCGB(M1, all_polys, out);
  check_validity(idealToList(M1), Modcgs);
  
  
  // Print M2.
  fprintf(out, "---------- M_simpl ---------------" + newline);
  showCCGB(M2, all_polys, out);
  check_validity(idealToList(M2), Modcgs);
  
  // Print M3.
  fprintf(out, "------------- M_onestep ------------" + newline);
  showCCGB(M3, all_polys, out);
  check_validity(idealToList(M3), Modcgs);

  // Print M4.
  fprintf(out, "------------------ M_completion ----------" + newline);
  showCCGB(M4, all_polys, out);
  check_validity(idealToList(M4), Modcgs);
    
  // Compare M1, M2, M3 and M4.
    
  if (lessSet(idealToList(M2), idealToList(M1)) == 1) {
    printf("M_simpl < M");
  }

  if (lessSet(idealToList(M3), idealToList(M2)) == 1) {
    printf("M_onestep < M_simpl");
  }

  int cmp34 = lessSet(idealToList(M4), idealToList(M3));
  if (cmp34 == 1) {
    printf("M_completion < M_onestep");
  } else {
    if (cmp34 == 0) {
      printf("M_onestep < M_completion");
    } else {
      printf("M_onestep == M_competion");
    }
  }

    
  fprintf(out, "---------- KSW --------" + newline);
  fprintf(out, "%s" + newline, StringModCGS_mod(F, Modcgs, 1));
  G_origin = sortSetAsce(G_origin);
  fprintf(out, "%s" + newline, StringCGB(G_origin, all_polys));
  show(size(G_origin));
    
}

/*
Output result of mcgbMain algorithm.
 */
proc simulate12(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);
  system("--ticks-per-sec", 1000);

  set_global_rings_mcgb();
  set_global_rings();
  set_global_objects();
  exportto(Top, debug_mode);
  exportto(Top, out);

  int i;
  ideal G_origin;
  list Modcgs;
  (G_origin, Modcgs) = cgb_mod(F, E, N, 1, out);
  list all_polys = idealToList(G_origin);

  setring @RP;
  def G = imap(BR, G_origin);
  def Modcgs = imap(BR, Modcgs);
  list G_list = idealToList(G);

  int is_essential;
  list BL;
  for (i = 1; i <= size(G); i++) {
    printf("Check %s:", showParamPoly(G[i]));
    (is_essential, BL) = checkEssential(G[i], G_list, Modcgs, 1);
    if (is_essential) {
      printf("ESSENTIAL!");
    } else {
      printf("NON-ESSENTIAL!");
    }
  }

  setring BR;
  
  printf("CHECK FINISHED!");

  ideal M;
  list cgs_m;
  (M, cgs_m) = mcgbMain(E, N, 1, 1, F);
  all_polys = mergeList(all_polys, idealToList(M));
  all_polys = sortSetAsce(all_polys);

  
  // Print the ring configuration.
  fprintf(out, newline + "+++++++++++++++++++++");
  fprintf(out, "The given ring is:");
  fprintf(out, "%s"+newline, BR);

  // Print the given parametric ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  showCCGB(M, all_polys, out);
  check_validity(idealToList(M), Modcgs);

  fprintf(out, "------------------" + newline);
  fprintf(out, "%s" + newline, StringModCGS_mod(F, Modcgs, 1));
  fprintf(out, "%s" + newline, StringCGB(G_origin, all_polys));

  close(out);
}

/*
Test with general simplification to multiple normal forms.
 */
proc simulate7(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);
  system("--ticks-per-sec", 1000);

  set_global_rings_mcgb();
  set_global_rings();
  set_global_objects();
  link special_out = "emmmm";
  exportto(Top, special_out);

  ideal G_origin;
  list Modcgs;
  (G_origin, Modcgs) = cgb_mod(F, E, N, 1, out);

  ideal M = mcgbGenerate(E, N, F, 0);
  int i;
  poly g;
  list p_list;

  print("==========================");
  show(M);
  check_validity(idealToList(M), Modcgs);
  
  for (i = 1; i <= size(M); i++) {
    g = M[i];
    ideal MRem = deletePolyFromIdeal(M, g);
    p_list = generalSimplify(g, MRem, E, N);
    if (size(p_list) > 0) {
      print("Ein Gutes Beispiel!");
      printf("%s is reduced to:", g);
      show(p_list);
    }
  }
}

/*
With and without optimization of MCGBMain.
 */

proc simulate_eins(ideal E, list N, ideal F) {
  //  set_global_rings_mcgb();
  //set_global_rings();
  //system("--ticks-per-sec", 1000);

  ideal G_origin;
  list Modcgs;
  timer = 0;
  int cnt_Time = timer;
  (G_origin, Modcgs) = cgb_mod(F, E, N, 1, out);
  int time_cnt_KSW = timer - cnt_Time;


  ideal M1;
  list cgs_m1;
  timer = 0;
  cnt_Time = timer;
  (M1, cgs_m1) = mcgbMainComp(G_origin, Modcgs, 0);
  int time_cnt_MCGB = timer - cnt_Time;

  ideal M2;
  list cgs_m2;
  timer = 0;
  cnt_Time = timer;
  (M2, cgs_m2) = mcgbMainComp(G_origin, Modcgs, 1);
  int time_cnt_MOPT = timer - cnt_Time;

  return (time_cnt_KSW, time_cnt_MCGB, time_cnt_MOPT);
}

proc simulate1(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);
  system("--ticks-per-sec", 1000);

  link time_res = out;
  open(time_res);


  int i, j;

  // Print the ring configuration.
  fprintf(time_res, newline + "+++++++++++++++++++++");
  fprintf(time_res, "The given ring is:");
  fprintf(time_res, "%s"+newline, BR);

  // Print the given parametric ideal.
  fprintf(time_res, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(time_res, "%s, ", F[i]);
    }
    fprintf(time_res, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(time_res, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(time_res, "E = {%s}." + newline, E);
  fprintf(time_res, "N = {%s}." + newline, string(N));


  int time_cnt_KSW = 0;
  int time_cnt_MCGB = 0;
  int time_cnt_MOPT = 0;
  int valT1, valT2, valT3;
  int exp_times = 10;

  set_global_rings();
  set_global_rings_mcgb();
  set_global_objects();

  for (i = 1; i <= exp_times; i++) {
    printf("Simulation %s:", string(i));
    (valT1, valT2, valT3) = simulate_eins(E, N, F);
    time_cnt_KSW = time_cnt_KSW + valT1;
    time_cnt_MCGB = time_cnt_MCGB + valT2;
    time_cnt_MOPT = time_cnt_MOPT + valT3;
  }

  time_cnt_KSW = time_cnt_KSW / exp_times;
  time_cnt_MCGB = time_cnt_MCGB / exp_times;
  time_cnt_MOPT = time_cnt_MOPT / exp_times;

  fprintf(time_res, "Time of KSW: %s ms;" + newline, string(time_cnt_KSW));
  fprintf(time_res, "Time of MCGB: %s ms;" + newline, string(time_cnt_MCGB));
  fprintf(time_res, "Time of MCGB with OPT: %s ms." + newline, string(time_cnt_MOPT));

  close(time_res);
}

/*
See whether MCGB < KSWCGB.
 */
proc simulate3(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);
  system("--ticks-per-sec", 1000);

  set_global_rings_mcgb();
  set_global_rings();
  set_global_objects();

  ideal G_origin;
  list Modcgs;
  (G_origin, Modcgs) = cgb_mod(F, E, N, 1, out);

  ideal M1;
  list cgs_m1;
  (M1, cgs_m1) = mcgbMainComp(G_origin, Modcgs, 1);
  
  if (size(M1) < size(G_origin)) {
    printf("MCGB < KSWCGB!!!!");
  }

}

/*
Record Time used.
 */
proc simulate11(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);
  system("--ticks-per-sec", 1000);

  exportto(Top, out);
  exportto(Top, debug_mode);
  link special_out = "debug_info.mp";
  link time_res = "time_info.mp";
  exportto(Top, special_out);
  open(out);
  open(special_out);
  open(time_res);


  int gen_simpl_flag = 1;
  
  int i, j;

  // Print the ring configuration.
  fprintf(out, "The given ring is:");
  fprintf(out, "%s" + newline, BR);

  fprintf(time_res, newline + "+++++++++++++++++++++");
  fprintf(time_res, "The given ring is:");
  fprintf(time_res, "%s"+newline, BR);

  // Print the given parametric ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  // KSWCGB and KSWCGS.

  set_global_rings_mcgb();
  

  
  set_global_rings();
  
  
  ideal G_origin;
  list Modcgs;
  timer = 0;
  int cnt_Time = timer;
  (G_origin, Modcgs) = cgb_mod(F, E, N, 1, out);
  int time_cnt_KSW = timer - cnt_Time;
  fprintf(time_res, "|CGS| = %s.", string(size(Modcgs)));
  fprintf(time_res, "|G| = %s.", string(size(G_origin)));
  fprintf(time_res, "Time Used: %s ms." + newline, string(time_cnt_KSW));

  
  G_origin = sortSetAsce(G_origin);
  printf("Step 0 is finished!");
  list all_polys = idealToList(G_origin);
  
  ideal G_init = purifyCGB(G_origin);
  G_init = sortSetAsce(G_init);
  all_polys = mergeList(all_polys, idealToList(G_init));
  exportto(Top, G_init);
  exportto(Top, Modcgs);

  /*
  ideal G_comp = mcgbGenerateComp(E, N, F, 0);
  G_comp = sortSetAsce(G_comp);
  all_polys = mergeList(all_polys, idealToList(G_comp));
  */
  //  ideal RGB = getRGB(F);
  //  all_polys = mergeList(all_polys, idealToList(RGB));
  
  ideal M1;
  list cgs_m1;
  timer = 0;
  cnt_Time = timer;
  (M1, cgs_m1) = mcgbMainComp(G_origin, Modcgs);
  int time_cnt_MCGB = timer - cnt_Time;
  fprintf(time_res, "|CGS_M| = %s.", string(size(cgs_m1)));
  fprintf(time_res, "|M|: %s", string(size(M1)));
  fprintf(time_res, "Time Used: %s ms." + newline, string(time_cnt_MCGB));
  all_polys = mergeList(all_polys, idealToList(M1));
  
  ideal M2;
  list cgs_m2;
  timer = 0;
  cnt_Time = timer;
  (M2, cgs_m2) = getMCGBComp(E, listToIdeal(N), G_origin, Modcgs);
  int time_cnt_MSIMPL = timer - cnt_Time;
  fprintf(time_res, "|CGS_M_SIMPL| = %s.", string(size(cgs_m2)));
  fprintf(time_res, "|M_simpl| = %s.", string(size(M2)));
  fprintf(time_res, "Time Used: %s ms." + newline, string(time_cnt_MSIMPL));
  all_polys = mergeList(all_polys, idealToList(M2));

  fprintf(time_res, "Total time of MCGB: %s ms;", string(time_cnt_MCGB+time_cnt_KSW));
  fprintf(time_res, "Percentage of MCGB: %s / %s.", string(time_cnt_MCGB), string(time_cnt_MCGB + time_cnt_KSW));
  fprintf(time_res, "Total time of M_simpl: %s ms;", string(time_cnt_MSIMPL + time_cnt_KSW));
  fprintf(time_res, "Percentage of M_simpl: %s / %s.", string(time_cnt_MSIMPL), string(time_cnt_MSIMPL + time_cnt_KSW));
  
  ideal MCGB_step;
  list cgs_step;
  (MCGB_step, cgs_step) = getMCGBNew1(E, listToIdeal(N), F, 1);
  all_polys = mergeList(all_polys, idealToList(MCGB_step));
  
  
  all_polys = sortSetAsce(all_polys);
  exportto(Top, all_polys);

  /*
  fprintf(out, "------------------------" + newline);
  fprintf(out, "RGB" + newline);
  showRGB(RGB, all_polys, out);
  fprintf(out, "Size is: %s." + newline, string(size(RGB)));
  check_validity(idealToList(RGB), Modcgs);
  */

  fprintf(out, "---------------------------" + newline);
  fprintf(out, "M1" + newline);
  showCCGB(M1, all_polys, out);
  fprintf(out, "Size is: %s." + newline, string(size(M1)));
  check_validity(idealToList(M1), Modcgs);

  list cgs_recovered = buildCGS(M1);
  show(size(Modcgs));
  show(size(cgs_recovered));

  fprintf(out, "---------------------------" + newline);
  fprintf(out, "M2" + newline);
  showCCGB(M2, all_polys, out);
  fprintf(out, "Size is: %s." + newline, string(size(M2)));
  check_validity(idealToList(M2), Modcgs);

  
  fprintf(out, "---------------------------" + newline);
  fprintf(out, "MCGB_step" + newline);
  showCCGB(MCGB_step, all_polys, out);
  fprintf(out, "Size is: %s." + newline, string(size(MCGB_step)));
  check_validity(idealToList(MCGB_step), Modcgs);

  /*
  fprintf(out, "=============Faith=================" + newline);
  fprintf(out, "Before preprocess:");
  fprintf(out, "%s" + newline, StringCGB(G_origin, all_polys));
  fprintf(out, newline + "Size is: %s." + newline, string(size(G_origin)));

  fprintf(out, "After preprocess:");
  fprintf(out, "%s" + newline, StringCGB(G_init, all_polys));
  fprintf(out, newline + "Size is: %s." + newline, string(size(G_init)));
  check_validity(idealToList(G_init), Modcgs);
  */
  fprintf(out, "--------------------------------------" + newline);
  fprintf(out, "%s" + newline, StringModCGS_mod(F, Modcgs, 1));
  fprintf(out, "%s" + newline, StringCGB(G_origin, all_polys));

  //sucheBeispiel(G_init, Modcgs, M1, cgs_m1, M2, cgs_m2, MCGB_step);
  
  
  /*
  fprintf(out, "-----------Completion----------" + newline);
  fprintf(out, "Starting from RGB, G_comp = ");
  showCCGB(G_comp, all_polys, out);
  check_validity(idealToList(G_comp), Modcgs);
  */
  
  
  
  
  close(out);
  close(special_out);
  close(time_res);
}

/*
Compare KSW with two choices of MDBasis.
 */
proc simulate1(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);

  exportto(Top, out);
  exportto(Top, debug_mode);
  open(out);

  int gen_simpl_flag = 1;
  
  int i, j;

  // Print the ring configuration.
  fprintf(out, "The given ring is:");
  fprintf(out, "%s" + newline, BR);

  // Print the given parametric ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  // KSWCGB and KSWCGS.

  set_global_rings_mcgb();
  

  
  set_global_rings();
  
  
  ideal G_origin;
  list Modcgs;
  (G_origin, Modcgs) = cgb_mod(F, E, N, 1, out);

  ideal G_alt;
  list Modcgs_alt;
  (G_alt, Modcgs_alt) = cgb_mod(F, E, N, 0, out);
  
  G_origin = sortSetAsce(G_origin);
  G_alt = sortSetAsce(G_alt);
  printf("Step 0 is finished!");
  list all_polys = idealToList(G_origin);
  all_polys = mergeList(all_polys, idealToList(G_alt));
  
  set_global_rings_mcgb();
  exportto(Top, Modcgs);

  ideal M1;
  list cgs_m1;
  (M1, cgs_m1) = mcgbMainComp(G_origin, Modcgs, 1);
  all_polys = mergeList(all_polys, idealToList(M1));
  
  ideal M2;
  list cgs_m2;
  (M2, cgs_m2) = mcgbMainComp(G_alt, Modcgs_alt, 1);
  all_polys = mergeList(all_polys, idealToList(M2));

  all_polys = sortSetAsce(all_polys);
  exportto(Top, all_polys);

  fprintf(out, "---------------------------" + newline);
  fprintf(out, "M1" + newline);
  showCCGB(M1, all_polys, out);
  fprintf(out, "Size is: %s." + newline, string(size(M1)));
  check_validity(idealToList(M1), Modcgs);

  fprintf(out, "--------Alt--------------" + newline);

  fprintf(out, "%s" + newline, StringCGB(G_alt, all_polys));
  fprintf(out, "%s" + newline, StringModCGS_mod(F, Modcgs_alt, 1));
  fprintf(out, "M_alt" + newline);
  showCCGB(M2, all_polys, out);
  fprintf(out, "Size is: %s." + newline, string(size(M2)));
  check_validity(idealToList(M2), Modcgs);


  fprintf(out, "---------------NEW-------------------" + newline);
  fprintf(out, "%s" + newline, StringCGB(G_origin, all_polys));
  fprintf(out, "%s" + newline, StringModCGS_mod(F, Modcgs, 1));
  fprintf(out, "M_new" + newline);
  showCCGB(M1, all_polys, out);
  fprintf(out, "Size is: %s." + newline, string(size(M1)));
  check_validity(idealToList(M1), Modcgs);

  
  
  
  close(out);
}

/*
For Completion
 */
proc simulate5(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);

  exportto(Top, out);
  exportto(Top, debug_mode);
  link special_out = "debug_info.mp";
  exportto(Top, special_out);
  open(out);
  open(special_out);


  int gen_simpl_flag = 1;
  
  int i, j;

  // Print the ring configuration.
  fprintf(out, "The given ring is:");
  fprintf(out, "%s" + newline, BR);


  // Print the given parametric ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  // KSWCGB and KSWCGS.

  set_global_rings_mcgb();
  

  
  set_global_rings();



  ideal G_origin;
  list Modcgs;
  (G_origin, Modcgs) = cgb_mod(F, E, N, 1, out);

  ideal G_comp = mcgbGenerateComp(E, N, F, 0);
  list all_polys = idealToList(G_comp);

  all_polys = sortSetAsce(all_polys);
  
  fprintf(out, "G_comp = ");
  showCCGB(G_comp, all_polys, out);
  check_validity(idealToList(G_comp), Modcgs);

  close(out);
  close(special_out);
}

/*
Compare KSWCGS and CGS from MCGB.
 */
proc simulate5(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);

  exportto(Top, out);
  exportto(Top, debug_mode);
  open(out);


  int gen_simpl_flag = 1;
  
  int i, j;

  // Print the ring configuration.
  fprintf(out, "The given ring is:");
  fprintf(out, "%s" + newline, BR);


  // Print the given parametric ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  // KSWCGB and KSWCGS.

  set_global_rings_mcgb();
  

  
  set_global_rings();



  ideal G_origin;
  list Modcgs;
  (G_origin, Modcgs) = cgb_mod(F, E, N, 1, out);
  G_origin = sortSetAsce(G_origin);
  list all_polys = idealToList(G_origin);

  exportto(Top, Modcgs);
  
  ideal M;
  list cgs_m;
  //(M, cgs_m) = getMCGBComp(E, listToIdeal(N), G_origin, Modcgs);
  (M, cgs_m) = mcgbMainComp(G_origin, Modcgs);
  all_polys = mergeList(all_polys, idealToList(M));

  list cgs_recover = buildCGS(M);

  show(size(Modcgs));
  show(size(cgs_recover));
  
  if (size(cgs_recover) < size(Modcgs)) {
    printf("CGS recovered is BETTER than original CGS!");
  } else {
    if (size(cgs_recover) == size(Modcgs)) {
      printf("CGS recovered is SAME as original CGS!");
    } else {
      printf("CGS is WORSE than original CGS!");
    }
  }

  all_polys = sortSetAsce(all_polys);
  
  fprintf(out, "=============Original==================");
  fprintf(out, "%s" + newline, StringCGB(G_origin, all_polys));
  fprintf(out, "%s" + newline, StringModCGS_mod(F, Modcgs, 0));

  fprintf(out, "============= Recovered ================");
  showCCGB(M, all_polys, out);
  fprintf(out, "%s" + newline, StringModCGS_mod(F, cgs_recover, 0));


  close(out);
}
